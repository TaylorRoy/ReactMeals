{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\taylo\\\\Desktop\\\\TaylorCoding\\\\React Course\\\\ReactMeals\\\\src\\\\store\\\\CartProvider.js\",\n    _s = $RefreshSig$();\n\nimport { useReducer } from \"react\";\nimport CartContext from \"./cart-context\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultCartState = {\n  items: [],\n  totalAmount: 0\n};\n\nconst cartReducer = (state, action) => {\n  if (action.type === \"ADD\") {\n    const updatedItems = state.items.concat(action.item); //returns a new array with new item added.  doesn't mutate current state.\n\n    const updatedTotalAmount = state.totalAmount + action.item.price * action.item.amount; //final amount $$$\n\n    const existingCartItemIndex = state.items.findIndex( //returns index of first item in cart with matching id or -1 if not found\n    item => item.id === action.item.id);\n    const exisitingCartItem = state.items[existingCartItemIndex]; //finds exisiting item in state.items arrays and save in a new const\n\n    if (exisitingCartItem) {\n      //if true, spread data for existing item into a new object and then add action amount to current amount.\n      const updatedItem = { ...exisitingCartItem,\n        amount: exisitingCartItem.amount + action.item.amount\n      };\n      updatedItems = [...state.items]; //new array that doesn't change state.items array.  will be used to put updatedItem\n\n      updatedItems[existingCartItemIndex] = updatedItem;\n    } else {\n      updatedItems = state.items.concat(action.item);\n    }\n\n    return {\n      items: updatedItems,\n      totalAmount: updatedTotalAmount\n    };\n  }\n\n  return defaultCartState;\n};\n\nconst CartProvider = props => {\n  _s();\n\n  const [cartState, dispatchCartAction] = useReducer(cartReducer, defaultCartState //initial state\n  );\n\n  const addItemToCartHandler = item => {\n    dispatchCartAction({\n      type: \"ADD\",\n      item: item\n    });\n  };\n\n  const removeItemFromCartHandler = id => {\n    dispatchCartAction({\n      type: \"REMOVE\",\n      id: id\n    });\n  };\n\n  const cartContext = {\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItem: addItemToCartHandler,\n    removeItem: removeItemFromCartHandler\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: cartContext,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CartProvider, \"PxEugEseoIJIbjFwtAJal5z5ClY=\");\n\n_c = CartProvider;\nexport default CartProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["C:/Users/taylo/Desktop/TaylorCoding/React Course/ReactMeals/src/store/CartProvider.js"],"names":["useReducer","CartContext","defaultCartState","items","totalAmount","cartReducer","state","action","type","updatedItems","concat","item","updatedTotalAmount","price","amount","existingCartItemIndex","findIndex","id","exisitingCartItem","updatedItem","CartProvider","props","cartState","dispatchCartAction","addItemToCartHandler","removeItemFromCartHandler","cartContext","addItem","removeItem","children"],"mappings":";;;AAAA,SAASA,UAAT,QAA2B,OAA3B;AAEA,OAAOC,WAAP,MAAwB,gBAAxB;;AAEA,MAAMC,gBAAgB,GAAG;AACvBC,EAAAA,KAAK,EAAE,EADgB;AAEvBC,EAAAA,WAAW,EAAE;AAFU,CAAzB;;AAKA,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACrC,MAAIA,MAAM,CAACC,IAAP,KAAgB,KAApB,EAA2B;AACzB,UAAMC,YAAY,GAAGH,KAAK,CAACH,KAAN,CAAYO,MAAZ,CAAmBH,MAAM,CAACI,IAA1B,CAArB,CADyB,CAC6B;;AACtD,UAAMC,kBAAkB,GACtBN,KAAK,CAACF,WAAN,GAAoBG,MAAM,CAACI,IAAP,CAAYE,KAAZ,GAAoBN,MAAM,CAACI,IAAP,CAAYG,MADtD,CAFyB,CAGqC;;AAE9D,UAAMC,qBAAqB,GAAGT,KAAK,CAACH,KAAN,CAAYa,SAAZ,EAC5B;AACCL,IAAAA,IAAD,IAAUA,IAAI,CAACM,EAAL,KAAYV,MAAM,CAACI,IAAP,CAAYM,EAFN,CAA9B;AAKA,UAAMC,iBAAiB,GAAGZ,KAAK,CAACH,KAAN,CAAYY,qBAAZ,CAA1B,CAVyB,CAUqC;;AAE9D,QAAIG,iBAAJ,EAAuB;AACrB;AACA,YAAMC,WAAW,GAAG,EAClB,GAAGD,iBADe;AAElBJ,QAAAA,MAAM,EAAEI,iBAAiB,CAACJ,MAAlB,GAA2BP,MAAM,CAACI,IAAP,CAAYG;AAF7B,OAApB;AAIAL,MAAAA,YAAY,GAAG,CAAC,GAAGH,KAAK,CAACH,KAAV,CAAf,CANqB,CAMY;;AACjCM,MAAAA,YAAY,CAACM,qBAAD,CAAZ,GAAsCI,WAAtC;AACD,KARD,MAQO;AACLV,MAAAA,YAAY,GAAGH,KAAK,CAACH,KAAN,CAAYO,MAAZ,CAAmBH,MAAM,CAACI,IAA1B,CAAf;AACD;;AACD,WAAO;AAAER,MAAAA,KAAK,EAAEM,YAAT;AAAuBL,MAAAA,WAAW,EAAEQ;AAApC,KAAP;AACD;;AACD,SAAOV,gBAAP;AACD,CA3BD;;AA6BA,MAAMkB,YAAY,GAAIC,KAAD,IAAW;AAAA;;AAC9B,QAAM,CAACC,SAAD,EAAYC,kBAAZ,IAAkCvB,UAAU,CAChDK,WADgD,EAEhDH,gBAFgD,CAE/B;AAF+B,GAAlD;;AAKA,QAAMsB,oBAAoB,GAAIb,IAAD,IAAU;AACrCY,IAAAA,kBAAkB,CAAC;AAAEf,MAAAA,IAAI,EAAE,KAAR;AAAeG,MAAAA,IAAI,EAAEA;AAArB,KAAD,CAAlB;AACD,GAFD;;AAIA,QAAMc,yBAAyB,GAAIR,EAAD,IAAQ;AACxCM,IAAAA,kBAAkB,CAAC;AAAEf,MAAAA,IAAI,EAAE,QAAR;AAAkBS,MAAAA,EAAE,EAAEA;AAAtB,KAAD,CAAlB;AACD,GAFD;;AAIA,QAAMS,WAAW,GAAG;AAClBvB,IAAAA,KAAK,EAAEmB,SAAS,CAACnB,KADC;AAElBC,IAAAA,WAAW,EAAEkB,SAAS,CAAClB,WAFL;AAGlBuB,IAAAA,OAAO,EAAEH,oBAHS;AAIlBI,IAAAA,UAAU,EAAEH;AAJM,GAApB;AAOA,sBACE,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEC,WAA7B;AAAA,cACGL,KAAK,CAACQ;AADT;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CA1BD;;GAAMT,Y;;KAAAA,Y;AA4BN,eAAeA,YAAf","sourcesContent":["import { useReducer } from \"react\";\r\n\r\nimport CartContext from \"./cart-context\";\r\n\r\nconst defaultCartState = {\r\n  items: [],\r\n  totalAmount: 0,\r\n};\r\n\r\nconst cartReducer = (state, action) => {\r\n  if (action.type === \"ADD\") {\r\n    const updatedItems = state.items.concat(action.item); //returns a new array with new item added.  doesn't mutate current state.\r\n    const updatedTotalAmount =\r\n      state.totalAmount + action.item.price * action.item.amount; //final amount $$$\r\n\r\n    const existingCartItemIndex = state.items.findIndex(\r\n      //returns index of first item in cart with matching id or -1 if not found\r\n      (item) => item.id === action.item.id\r\n    );\r\n\r\n    const exisitingCartItem = state.items[existingCartItemIndex]; //finds exisiting item in state.items arrays and save in a new const\r\n\r\n    if (exisitingCartItem) {\r\n      //if true, spread data for existing item into a new object and then add action amount to current amount.\r\n      const updatedItem = {\r\n        ...exisitingCartItem,\r\n        amount: exisitingCartItem.amount + action.item.amount,\r\n      };\r\n      updatedItems = [...state.items]; //new array that doesn't change state.items array.  will be used to put updatedItem\r\n      updatedItems[existingCartItemIndex] = updatedItem;\r\n    } else {\r\n      updatedItems = state.items.concat(action.item);\r\n    }\r\n    return { items: updatedItems, totalAmount: updatedTotalAmount };\r\n  }\r\n  return defaultCartState;\r\n};\r\n\r\nconst CartProvider = (props) => {\r\n  const [cartState, dispatchCartAction] = useReducer(\r\n    cartReducer,\r\n    defaultCartState //initial state\r\n  );\r\n\r\n  const addItemToCartHandler = (item) => {\r\n    dispatchCartAction({ type: \"ADD\", item: item });\r\n  };\r\n\r\n  const removeItemFromCartHandler = (id) => {\r\n    dispatchCartAction({ type: \"REMOVE\", id: id });\r\n  };\r\n\r\n  const cartContext = {\r\n    items: cartState.items,\r\n    totalAmount: cartState.totalAmount,\r\n    addItem: addItemToCartHandler,\r\n    removeItem: removeItemFromCartHandler,\r\n  };\r\n\r\n  return (\r\n    <CartContext.Provider value={cartContext}>\r\n      {props.children}\r\n    </CartContext.Provider>\r\n  );\r\n};\r\n\r\nexport default CartProvider;\r\n"]},"metadata":{},"sourceType":"module"}