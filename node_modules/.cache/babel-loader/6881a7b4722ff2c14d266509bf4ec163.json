{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\taylo\\\\Desktop\\\\TaylorCoding\\\\React Course\\\\ReactMeals\\\\src\\\\store\\\\CartProvider.js\",\n    _s = $RefreshSig$();\n\nimport { useReducer } from \"react\";\nimport CartContext from \"./cart-context\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultCartState = {\n  items: [],\n  totalAmount: 0\n};\n\nconst cartReducer = (state, action) => {\n  if (action.type === \"ADD\") {\n    const updatedTotalAmount = state.totalAmount + action.item.price * action.item.amount; //final amount $$$\n\n    const existingCartItemIndex = state.items.findIndex( //returns index of first item in cart with matching id or -1 if not found\n    item => item.id === action.item.id);\n    const exisitingCartItem = state.items[existingCartItemIndex]; //finds exisiting item in state.items arrays and save in a new const\n    // let updatedItem;\n\n    let updatedItems;\n\n    if (exisitingCartItem) {\n      //if true, spread data for existing item into a new object and then add action amount(1-5) to current amount.\n      const updatedItem = { ...exisitingCartItem,\n        amount: exisitingCartItem.amount + action.item.amount\n      };\n      updatedItems = [...state.items]; //new array that doesn't change state.items array in memory.  will be used to put updatedItem\n\n      updatedItems[existingCartItemIndex] = updatedItem; //OVERWRITE old item with new item\n    } else {\n      //if added for first time...\n      updatedItems = state.items.concat(action.item); //returns a new array with new item added.  doesn't mutate current state.\n    }\n\n    return {\n      items: updatedItems,\n      totalAmount: updatedTotalAmount\n    };\n  }\n\n  if (action.type === \"REMOVE\") {\n    const existingCartItemIndex = state.items.findIndex(item => item.id === action.id); //returns index of first item in cart with matching id or -1 if not found.  amount is total added.\n\n    const existingItem = state.items[existingCartItemIndex];\n    const updatedTotalAmount = state.totalAmount - existingItem.price;\n    let updatedItems;\n\n    if (existingItem.amount === 1) {\n      updatedItems = state.items.filter(item => item.id !== action.id);\n    } else {\n      const updatedItem = { ...existingItem,\n        amount: existingItem.amount - 1\n      };\n      updatedItems = [...state.items];\n      updatedItems[existingCartItemIndex] = updatedItem;\n    }\n\n    return {\n      items: updatedItems,\n      totalAmount: updatedTotalAmount\n    };\n  }\n\n  return defaultCartState;\n};\n\nconst CartProvider = props => {\n  _s();\n\n  const [cartState, dispatchCartAction] = useReducer(cartReducer, defaultCartState //initial state\n  );\n\n  const addItemToCartHandler = item => {\n    dispatchCartAction({\n      type: \"ADD\",\n      item: item\n    });\n  };\n\n  const removeItemFromCartHandler = id => {\n    dispatchCartAction({\n      type: \"REMOVE\",\n      id: id\n    });\n  };\n\n  const cartContext = {\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItem: addItemToCartHandler,\n    removeItem: removeItemFromCartHandler\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: cartContext,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CartProvider, \"PxEugEseoIJIbjFwtAJal5z5ClY=\");\n\n_c = CartProvider;\nexport default CartProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["C:/Users/taylo/Desktop/TaylorCoding/React Course/ReactMeals/src/store/CartProvider.js"],"names":["useReducer","CartContext","defaultCartState","items","totalAmount","cartReducer","state","action","type","updatedTotalAmount","item","price","amount","existingCartItemIndex","findIndex","id","exisitingCartItem","updatedItems","updatedItem","concat","existingItem","filter","CartProvider","props","cartState","dispatchCartAction","addItemToCartHandler","removeItemFromCartHandler","cartContext","addItem","removeItem","children"],"mappings":"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","sourcesContent":["import { useReducer } from \"react\";\r\n\r\nimport CartContext from \"./cart-context\";\r\n\r\nconst defaultCartState = {\r\n  items: [],\r\n  totalAmount: 0,\r\n};\r\n\r\nconst cartReducer = (state, action) => {\r\n  if (action.type === \"ADD\") {\r\n    const updatedTotalAmount =\r\n      state.totalAmount + action.item.price * action.item.amount; //final amount $$$\r\n\r\n    const existingCartItemIndex = state.items.findIndex(\r\n      //returns index of first item in cart with matching id or -1 if not found\r\n      (item) => item.id === action.item.id\r\n    );\r\n\r\n    const exisitingCartItem = state.items[existingCartItemIndex]; //finds exisiting item in state.items arrays and save in a new const\r\n    // let updatedItem;\r\n    let updatedItems;\r\n\r\n    if (exisitingCartItem) {\r\n      //if true, spread data for existing item into a new object and then add action amount(1-5) to current amount.\r\n      const updatedItem = {\r\n        ...exisitingCartItem,\r\n        amount: exisitingCartItem.amount + action.item.amount,\r\n      };\r\n      updatedItems = [...state.items]; //new array that doesn't change state.items array in memory.  will be used to put updatedItem\r\n      updatedItems[existingCartItemIndex] = updatedItem; //OVERWRITE old item with new item\r\n    } else {\r\n      //if added for first time...\r\n      updatedItems = state.items.concat(action.item); //returns a new array with new item added.  doesn't mutate current state.\r\n    }\r\n    return { items: updatedItems, totalAmount: updatedTotalAmount };\r\n  }\r\n\r\n  if (action.type === \"REMOVE\") {\r\n    const existingCartItemIndex = state.items.findIndex(\r\n      (item) => item.id === action.id\r\n    ); //returns index of first item in cart with matching id or -1 if not found.  amount is total added.\r\n\r\n    const existingItem = state.items[existingCartItemIndex];\r\n    const updatedTotalAmount = state.totalAmount - existingItem.price;\r\n\r\n    let updatedItems;\r\n    if (existingItem.amount === 1) {\r\n      updatedItems = state.items.filter((item) => item.id !== action.id);\r\n    } else {\r\n      const updatedItem = { ...existingItem, amount: existingItem.amount - 1 };\r\n      updatedItems = [...state.items];\r\n      updatedItems[existingCartItemIndex] = updatedItem;\r\n    }\r\n    return { items: updatedItems, totalAmount: updatedTotalAmount };\r\n  }\r\n  return defaultCartState;\r\n};\r\n\r\nconst CartProvider = (props) => {\r\n  const [cartState, dispatchCartAction] = useReducer(\r\n    cartReducer,\r\n    defaultCartState //initial state\r\n  );\r\n\r\n  const addItemToCartHandler = (item) => {\r\n    dispatchCartAction({ type: \"ADD\", item: item });\r\n  };\r\n\r\n  const removeItemFromCartHandler = (id) => {\r\n    dispatchCartAction({ type: \"REMOVE\", id: id });\r\n  };\r\n\r\n  const cartContext = {\r\n    items: cartState.items,\r\n    totalAmount: cartState.totalAmount,\r\n    addItem: addItemToCartHandler,\r\n    removeItem: removeItemFromCartHandler,\r\n  };\r\n\r\n  return (\r\n    <CartContext.Provider value={cartContext}>\r\n      {props.children}\r\n    </CartContext.Provider>\r\n  );\r\n};\r\n\r\nexport default CartProvider;\r\n"]},"metadata":{},"sourceType":"module"}